/* controlMapping.h - library for the horizon control mapping functions
 * created by Zach Montgomery August 2021
*/

#ifndef controlMapping_h

#define controlMapping_h

//#include <stdio.h>
#include <math.h>

// define all used functions

double left(double s, double a);
double right(double s, double a);
double bounds(double x);
double calc_dL(struct telemetryData in);

double pwm2frac(int pwm);

void mode1(struct pilotCommands in, double *lr);
void mode2(struct pilotCommands pilot, double dL, double *lr);

// define the global constants (they are all in uppercase for ease of identifying)
//##########################################################################

// constants
// #define PI 3.14159265               // pi
#define G 32.174                    // acceleration due to gravity (ft/sec^2)
#define RHO 0.0020482               // density of air (slugs/ft^3)
// control parameters
#define D 20.0                      // max deflection of any given control surface (deg)
#define DL_MAX 0.9                  // max acceptable value for dL
#define DL_MIN 0.1                  // mIN acceptable value for dL
#define PSCT_GAIN 4.0               // tunable gain on the SCT criteria for the calcCL2 function
// aircraft properties
#define W 20.0                      // weight of aircraft (lbf)             ====THIS NEEDS TO BE UPDATED====
#define S 12.29923797666569         // planform area of main wing (ft^2)
#define B 9.91936999529998          // wingspan (ft)
// transmitter values
#define TRANS_PWM_MIN 900.0
#define TRANS_PWM_MAX 2096.0
#define TRANS_PWM_NOM 1495.0
#define TRANS_PWM_NOISE 150.0

// custom struct types
struct telemetryData {
    double airspeed;
    double climbRate;
    double bankAngle;
    double elevationAngle;
    double rollRate;
};
struct pilotCommands {
    int ail;
    int ele;
    int rud;
    int modeSwitch;
};

/* main function
int main() {
    
    double deg[11], dL;
    int i, dl, dm;
    
    while(1) {
        printf("\n\n\n=================================================\n\n\n");
        
        // printf("\nEnter a value for dL:    ");
        // scanf("%lf", &dL);
        printf("Enter a value for dl:    ");
        scanf("%d", &dl);
        printf("Enter a value for dm:    ");
        scanf("%d", &dm);
        
        mode1(dl, dm, deg);
        
        printf("\nResults in degrees are:\n");
        for (i=0; i<5; i++) {
            printf("l%1d = %.6lf\n", 4-i, deg[i]);
        }
        printf("ce = %.6lf\n", deg[5]);
        for (i=0; i<5; i++) {
            printf("r%1d = %.6lf\n", i, deg[i+6]);
        }
        
        
    }
    
    
}
*/

double left(double s, double a) {
    /*
     * s = symmetric value (deg)
     * a = asymmetric value (deg)
    */
    return s - a;
}

double right(double s, double a) {
    /*
     * s = symmetric value (deg)
     * a = asymmetric value (deg)
    */
    return s + a;
}

double bounds(double x) {
    /*
     * x = value in degrees
    */
    if (x < -D) x = -D;
    if (x >  D) x = D;
    return x;
}

double calc_dL(struct telemetryData in) {
    /* 
     * inputs
     * V = airspeed (ft/sec)
     * phi = roll attitude, bank angle (radians)
     * p = actual roll rate of the aircraft, body frame (rad/sec)
     * climbRate = climb rate (ft/sec)
     * theta = pitch attitude, elevation angle (radians)
     * 
     * outputs
     * dL
    */
    double V, phi, p, climbRate, theta;
    double CL_sct, gamma, p_sct;
    double Omega, p_st_sct, r_st_sct, alpha;
    
    // unpact input struct
    V           = in.airspeed;
    phi         = in.bankAngle;
    climbRate   = in.climbRate;
    p           = in.rollRate;
    theta       = in.elevationAngle;
    
    // calculate climb angle
    if (climbRate >= V) {
        gamma = PI/2.;
    }
    else if (climbRate <= -V) {
        gamma = -PI/2.;
    }
    else {
        gamma = asin(climbRate / V);
    }
    
    // calculate the expected roll rate for the steady coordinated turn
    if (V != 0. && fabs(phi) != PI/2.) {
        Omega = G * tan(phi) / V;
        p_st_sct = -sin(gamma) * Omega;
        r_st_sct = cos(phi) * cos(gamma) * Omega;
        
        
        alpha = (theta - gamma) / cos(phi);
        p_sct = cos(alpha) * p_st_sct - sin(alpha) * r_st_sct;
    }
    else {
        p_sct = 0.;
    }
    
    // check for non 0 airspeed
    if (V != 0.) {
        // check that roll rate is less than the expected steady coordinated turn roll rate
        if (fabs(p) <= p_sct * PSCT_GAIN) {
            // check that plane isn't knife edged
            if (fabs(phi) != PI/2.) {
                CL_sct = 2. * W * cos(gamma) / RHO / V / V / S / cos(phi); // Eq. (12)
            }
            else {
                return 0.;  // if plane is knife edged then return CL of 0
            }
        }
        else {
            CL_sct = 2. * W * cos(gamma) * cos(phi) / RHO / V / V / S;   // Eq. (14)
        }
    }
    else {
        return DL_MAX;  // return the max CL value if 0 airspeed
    }
    
    // Eq. (13), ensure that CL is bounded
    if (CL_sct > DL_MAX) {
        return DL_MAX;
    }
    else if (CL_sct < DL_MIN) {
        return DL_MIN;
    }
    else {
        return CL_sct;
    }
}

double pwm2frac(int pwm) {
    if (pwm > int(TRANS_PWM_MAX + TRANS_PWM_NOISE) || pwm < int(TRANS_PWM_MIN - TRANS_PWM_NOISE)) return 0.0;
    if (pwm > int(TRANS_PWM_MAX)) return 1.0;
    if (pwm < int(TRANS_PWM_MIN)) return -1.0;
    return 2.0 * (double(pwm) - TRANS_PWM_MIN) / (TRANS_PWM_MAX - TRANS_PWM_MIN) - 1.0;
}

void mode1(struct pilotCommands in, double *lr) {
    double s[5], a[5], dl, dm;
    int i;
    
    dl = pwm2frac(in.ail);
    dm = pwm2frac(in.ele);
    
    for (i=0; i<5; i++) {
        s[i] = D * dm;
        a[i] = D * dl;
    }
    
    // set center control surface
    lr[5] = bounds(D * dm);
    // loop thru inboard to outboard control surfaces
    for (i=0; i<5; i++) {
        // set left control surface
        lr[4-i] = bounds( left(s[i], a[i]));
        // set right control surface
        lr[6+i] = bounds(right(s[i], a[i]));
    }
}

void mode2(struct pilotCommands pilot, double dL, double *lr) {
    double sym[6], asym[5];
    double CL0, CL1, CL2, CL3;
    double Cm0, Cm1, Cm2, Cm3, Cm4, Cm5;
    double pbar0, pbar1, pbar2, pbar3, pbar4, pbar5, pbar6, pbar7;
    int i;
    
    CL1   = dL;
    Cm1   = -pwm2frac(pilot.ele) * 0.1;
    pbar1 = pwm2frac(pilot.ail) * 0.2;
    
    CL0 = 1.;
    CL2 = CL1 * CL1;
    CL3 = CL2 * CL1;
    
    Cm0 = 1.;
    Cm2 = Cm1 * Cm1;
    Cm3 = Cm2 * Cm1;
    Cm4 = Cm3 * Cm1;
    Cm5 = Cm4 * Cm1;
    
    pbar0 = 1.;
    pbar2 = pbar1 * pbar1;
    pbar3 = pbar2 * pbar1;
    pbar4 = pbar3 * pbar1;
    pbar5 = pbar4 * pbar1;
    pbar6 = pbar5 * pbar1;
    pbar7 = pbar6 * pbar1;
    
    sym[0] = CL0 * (Cm0 * (-3.559662474558318 * pbar0 + -11.579497920336825 * pbar2 + 316.81435885584386 * pbar4 + 98.89954859960493 * pbar6)  + Cm1 * (-73.30564304951422 * pbar0 + -399.79104663873994 * pbar2 + 35503.94526029779 * pbar4 + -447509.36946565 * pbar6)  + Cm2 * (-60.22091947864117 * pbar0 + 7210.508992551694 * pbar2 + -46775.99411585771 * pbar4 + -384526.70718256844 * pbar6)  + Cm3 * (1847.8201025288095 * pbar0 + 65822.49597312468 * pbar2 + -3571758.206226628 * pbar4 + 43120654.282026306 * pbar6)  + Cm4 * (1112.037791242798 * pbar0 + -436332.56810124667 * pbar2 + 6448978.345389973 * pbar4 + -73292002.71831866 * pbar6) )  + CL1 * (Cm0 * (-12.088493401221092 * pbar0 + -79.66810626069106 * pbar2 + 4726.741863120833 * pbar4 + -38007.03813046971 * pbar6)  + Cm1 * (6.165679757410678 * pbar0 + 6840.4642874013525 * pbar2 + -223981.9767717463 * pbar4 + 2406807.2398683075 * pbar6)  + Cm2 * (2067.851113931917 * pbar0 + -34546.50752097961 * pbar2 + 1241420.5650810848 * pbar4 + -30529748.316786885 * pbar6)  + Cm3 * (-4121.583179652948 * pbar0 + -599903.3013900614 * pbar2 + 19581907.79611061 * pbar4 + -209051158.07552633 * pbar6)  + Cm4 * (-108302.43920187361 * pbar0 + 7108278.453641933 * pbar2 + -352133160.0803669 * pbar4 + 6106178935.79047 * pbar6) )  + CL2 * (Cm0 * (7.019326754341354 * pbar0 + 396.0850960550902 * pbar2 + -10424.1464154518 * pbar4 + 33755.948646587625 * pbar6)  + Cm1 * (132.79019265405813 * pbar0 + -9242.675218321005 * pbar2 + 224289.18317954228 * pbar4 + -2221087.6783516547 * pbar6)  + Cm2 * (-4413.190201120127 * pbar0 + 117078.32507312791 * pbar2 + -8463897.136011817 * pbar4 + 172862237.18297702 * pbar6)  + Cm3 * (-2331.812086417487 * pbar0 + 993623.6747208801 * pbar2 + -21963316.95001304 * pbar4 + 168866058.7299978 * pbar6)  + Cm4 * (316246.04617772927 * pbar0 + -25728132.70545301 * pbar2 + 1532180869.8660405 * pbar4 + -26381981654.825516 * pbar6) )  + CL3 * (Cm0 * (-2.418620760227468 * pbar0 + -192.12156293698894 * pbar2 + 2537.3000360581746 * pbar4 + 36289.506535181274 * pbar6)  + Cm1 * (-95.19209125959678 * pbar0 + 2864.563122576167 * pbar2 + -29311.24276289735 * pbar4 + 83164.66808854541 * pbar6)  + Cm2 * (2624.259174833236 * pbar0 + -123271.54728627096 * pbar2 + 9129999.812731808 * pbar4 + -169994296.53812614 * pbar6)  + Cm3 * (4788.187103705627 * pbar0 + -482858.3663541341 * pbar2 + 6177693.887017139 * pbar4 + -2300221.025107709 * pbar6)  + Cm4 * (-223381.05350152604 * pbar0 + 22226749.00178363 * pbar2 + -1384489970.0198982 * pbar4 + 23434718872.288418 * pbar6) );
    
    sym[1] = CL0 * (Cm0 * (-2.403494878076988 * pbar0 + -35.646869197114256 * pbar2 + 1215.3973702970384 * pbar4 + -16781.270650663067 * pbar6)  + Cm1 * (-44.218760119664935 * pbar0 + 1598.0840198428095 * pbar2 + -20854.69117551426 * pbar4 + 55446.69800335639 * pbar6)  + Cm2 * (-185.8003118114464 * pbar0 + 27330.449141059882 * pbar2 + -1207738.5079247858 * pbar4 + 15773340.16432 * pbar6)  + Cm3 * (1158.3090406988595 * pbar0 + -60756.670589883484 * pbar2 + 947822.0499011881 * pbar4 + -1624479.3201848734 * pbar6)  + Cm4 * (13825.36927410371 * pbar0 + -2366967.6672598408 * pbar2 + 101628279.87454247 * pbar4 + -1311919831.6134264 * pbar6) )  + CL1 * (Cm0 * (-1.538467973989372 * pbar0 + 588.2362828234743 * pbar2 + -19869.772965410917 * pbar4 + 239561.8455551428 * pbar6)  + Cm1 * (-72.95037738616891 * pbar0 + 15072.57045512369 * pbar2 + -650867.4106037657 * pbar4 + 8257411.274161546 * pbar6)  + Cm2 * (2885.5680596369684 * pbar0 + -362505.70930456865 * pbar2 + 14574928.318531595 * pbar4 + -184623338.18301922 * pbar6)  + Cm3 * (7066.970253672076 * pbar0 + -1550028.514163078 * pbar2 + 68532280.69952735 * pbar4 + -887954622.8137497 * pbar6)  + Cm4 * (-218443.98369041612 * pbar0 + 30138148.47373308 * pbar2 + -1238406021.8674715 * pbar4 + 15816729780.505932 * pbar6) )  + CL2 * (Cm0 * (5.023743311607993 * pbar0 + -6.074517189679653 * pbar2 + 9355.36933051415 * pbar4 + -192401.57761303705 * pbar6)  + Cm1 * (318.4387681172268 * pbar0 + -54314.48873007236 * pbar2 + 2257769.4943924346 * pbar4 + -28246674.896588948 * pbar6)  + Cm2 * (-5008.528900028603 * pbar0 + 597179.3182064729 * pbar2 + -25066822.993762556 * pbar4 + 332898471.9216039 * pbar6)  + Cm3 * (-33898.46736782886 * pbar0 + 5726235.840903168 * pbar2 + -242567184.7801624 * pbar4 + 3089146519.5699983 * pbar6)  + Cm4 * (490779.8076488683 * pbar0 + -63660893.49085329 * pbar2 + 2624015757.9517574 * pbar4 + -34010028048.446552 * pbar6) )  + CL3 * (Cm0 * (-2.2303574692108574 * pbar0 + -501.7767300277647 * pbar2 + 12722.353308825443 * pbar4 + -89260.06530704672 * pbar6)  + Cm1 * (-208.0883807784811 * pbar0 + 36066.266855415946 * pbar2 + -1561712.396504536 * pbar4 + 20032717.843379542 * pbar6)  + Cm2 * (2227.220258982423 * pbar0 + -232971.35411268013 * pbar2 + 10292281.939937487 * pbar4 + -146166623.35862303 * pbar6)  + Cm3 * (26238.04190004868 * pbar0 + -4212593.465310271 * pbar2 + 179155121.8540448 * pbar4 + -2300151815.8045974 * pbar6)  + Cm4 * (-284852.419674358 * pbar0 + 35293725.72865325 * pbar2 + -1460777737.7466598 * pbar4 + 19201550317.811752 * pbar6) );
    
    sym[2] = CL0 * (Cm0 * (-2.63218664950157 * pbar0 + -23.37715458558955 * pbar2 + 165.4397669882458 * pbar4 + 16.021076154093198 * pbar6)  + Cm1 * (-49.4279804066055 * pbar0 + 368.41017935559796 * pbar2 + 24794.587068321147 * pbar4 + -466948.2228537527 * pbar6)  + Cm2 * (-97.51181073863941 * pbar0 + 9628.678999761596 * pbar2 + -241160.42146057155 * pbar4 + 2550142.20856313 * pbar6)  + Cm3 * (489.6254737660698 * pbar0 + 46505.6473522124 * pbar2 + -3532747.2300797463 * pbar4 + 53903195.40799345 * pbar6)  + Cm4 * (6264.801542378455 * pbar0 + -740438.2417143525 * pbar2 + 25211811.373171862 * pbar4 + -328637330.2007092 * pbar6) )  + CL1 * (Cm0 * (-0.7668549605781797 * pbar0 + -25.013116795380512 * pbar2 + 5047.005376320091 * pbar4 + -58346.64261156586 * pbar6)  + Cm1 * (-58.23041065867691 * pbar0 + 11564.201666690657 * pbar2 + -495401.99615344836 * pbar4 + 6520078.728491525 * pbar6)  + Cm2 * (1046.4233220132833 * pbar0 + -48471.2533138011 * pbar2 + 1508928.4148951715 * pbar4 + -25671542.069509134 * pbar6)  + Cm3 * (5284.021239942589 * pbar0 + -1095064.0250580928 * pbar2 + 48462801.24058112 * pbar4 + -656864419.8588098 * pbar6)  + Cm4 * (-84795.22458050113 * pbar0 + 8728970.560455224 * pbar2 + -396619966.7402356 * pbar4 + 6003732032.092217 * pbar6) )  + CL2 * (Cm0 * (-2.8320076003262074 * pbar0 + 980.8526287532865 * pbar2 + -34166.40915612104 * pbar4 + 352640.2525588945 * pbar6)  + Cm1 * (161.48606671224164 * pbar0 + -24107.53175708355 * pbar2 + 1034392.1781867027 * pbar4 + -13978042.93713078 * pbar6)  + Cm2 * (-1186.0224048078678 * pbar0 + -2076.5136491721764 * pbar2 + -1311640.679728013 * pbar4 + 51371065.98551675 * pbar6)  + Cm3 * (-17318.971564448642 * pbar0 + 2546059.298390867 * pbar2 + -107671815.25897257 * pbar4 + 1446978862.390019 * pbar6)  + Cm4 * (189087.53255310853 * pbar0 + -21958054.829722147 * pbar2 + 1171713907.046318 * pbar4 + -18832716623.339302 * pbar6) )  + CL3 * (Cm0 * (1.8756001359323595 * pbar0 + -789.029367082552 * pbar2 + 28240.62078058575 * pbar4 + -304648.39425191877 * pbar6)  + Cm1 * (-74.19123404550884 * pbar0 + 10549.23569017336 * pbar2 + -499356.421419973 * pbar4 + 7222375.42056563 * pbar6)  + Cm2 * (355.5584747985082 * pbar0 + 28548.304808960493 * pbar2 + 489156.12829496537 * pbar4 + -33838890.78732358 * pbar6)  + Cm3 * (11465.001746680173 * pbar0 + -1456907.7884080969 * pbar2 + 60992184.96939733 * pbar4 + -828198159.1715173 * pbar6)  + Cm4 * (-115976.27755165099 * pbar0 + 15565916.555763273 * pbar2 + -895769411.0887035 * pbar4 + 14582395600.960236 * pbar6) );
    
    sym[3] = CL0 * (Cm0 * (-3.014684201838323 * pbar0 + -30.407912358291743 * pbar2 + 411.7007488739794 * pbar4 + -4050.776193802604 * pbar6)  + Cm1 * (-58.65411214356896 * pbar0 + -362.61292431653806 * pbar2 + 51338.25978526218 * pbar4 + -786785.0633754921 * pbar6)  + Cm2 * (-41.026857394122466 * pbar0 + 3018.8639038496844 * pbar2 + -19711.461036330536 * pbar4 + 1137607.3179399818 * pbar6)  + Cm3 * (-148.0823498290031 * pbar0 + 107676.36905244742 * pbar2 + -5926285.824974038 * pbar4 + 84023846.49556796 * pbar6)  + Cm4 * (1031.0509460274452 * pbar0 + 109464.97806858893 * pbar2 + -221760.13680356368 * pbar4 + -163661059.96300465 * pbar6) )  + CL1 * (Cm0 * (-2.6060209457982153 * pbar0 + -153.97746721061657 * pbar2 + 6920.304831438505 * pbar4 + -45343.39811568239 * pbar6)  + Cm1 * (-62.96614050660035 * pbar0 + 11422.868941327964 * pbar2 + -497952.0334127754 * pbar4 + 6882784.552907292 * pbar6)  + Cm2 * (-238.4965091299821 * pbar0 + 58501.44783460363 * pbar2 + -73404.3721157789 * pbar4 + -34387000.85183322 * pbar6)  + Cm3 * (5731.01398326531 * pbar0 + -970708.0871703931 * pbar2 + 45512943.402243786 * pbar4 + -675125535.1203482 * pbar6)  + Cm4 * (13384.538944870612 * pbar0 + -32106.912573048387 * pbar2 + -284869522.8148965 * pbar4 + 7175776310.283998 * pbar6) )  + CL2 * (Cm0 * (-6.989587945182331 * pbar0 + 1006.5248203600823 * pbar2 + -25266.537561416982 * pbar4 + 144920.39592336235 * pbar6)  + Cm1 * (106.77533402533125 * pbar0 + -16922.636526736544 * pbar2 + 852359.9806076913 * pbar4 + -12970426.826321095 * pbar6)  + Cm2 * (1640.604290347898 * pbar0 + -145208.22039909117 * pbar2 + -4103424.1442603758 * pbar4 + 169543357.87705866 * pbar6)  + Cm3 * (-10121.080973034153 * pbar0 + 1478299.5191135008 * pbar2 + -78484144.34200913 * pbar4 + 1251902694.6878629 * pbar6)  + Cm4 * (-41435.37836566379 * pbar0 + -9618990.69861476 * pbar2 + 1459439309.0374534 * pbar4 + -30525456842.038372 * pbar6) )  + CL3 * (Cm0 * (4.719462659388866 * pbar0 + -673.8453201292075 * pbar2 + 16560.265288774754 * pbar4 + -92487.35238071122 * pbar6)  + Cm1 * (-19.39022430582988 * pbar0 + 4912.2726069279015 * pbar2 + -382120.84156654426 * pbar4 + 6732045.7594599975 * pbar6)  + Cm2 * (-1154.790224819558 * pbar0 + 51452.6734131456 * pbar2 + 5785903.045868172 * pbar4 + -160239662.41281182 * pbar6)  + Cm3 * (4043.8593183164808 * pbar0 + -578759.786199769 * pbar2 + 38777647.13536874 * pbar4 + -680472253.6866149 * pbar6)  + Cm4 * (19414.463203894364 * pbar0 + 12739100.64920811 * pbar2 + -1383512760.6422176 * pbar4 + 26819190144.2607 * pbar6) );
    
    sym[4] = CL0 * (Cm0 * (-3.137803329176583 * pbar0 + -58.61173994615446 * pbar2 + 1638.4916765036514 * pbar4 + -20233.121896438413 * pbar6)  + Cm1 * (-66.24721054796225 * pbar0 + 590.3461188425433 * pbar2 + -11695.577018647034 * pbar4 + 175541.95423663346 * pbar6)  + Cm2 * (-29.352155772892505 * pbar0 + 5905.723656791461 * pbar2 + -349010.41462650686 * pbar4 + 7075729.535993062 * pbar6)  + Cm3 * (-308.19209313872193 * pbar0 + -9164.403947240075 * pbar2 + 1151069.3300280161 * pbar4 + -28018861.841909435 * pbar6)  + Cm4 * (-1654.2732808565156 * pbar0 + 332041.6030653205 * pbar2 + 4049821.99708007 * pbar4 + -415285233.9322629 * pbar6) )  + CL1 * (Cm0 * (-6.725931019716647 * pbar0 + 297.5936693700819 * pbar2 + -16814.705234726538 * pbar4 + 294443.3889807615 * pbar6)  + Cm1 * (-37.997355668330066 * pbar0 + -2723.5609911623824 * pbar2 + 375458.2596284916 * pbar4 + -7028710.291138224 * pbar6)  + Cm2 * (-517.6196757548146 * pbar0 + -81484.4826546413 * pbar2 + 11493812.579637755 * pbar4 + -242344000.94205067 * pbar6)  + Cm3 * (2413.7605510992917 * pbar0 + 940757.6170896944 * pbar2 + -76359670.00491038 * pbar4 + 1309491494.2963912 * pbar6)  + Cm4 * (48354.51150450807 * pbar0 + 7936339.573300771 * pbar2 + -1215518268.1267157 * pbar4 + 26109662334.143196 * pbar6) )  + CL2 * (Cm0 * (-3.8021120963644273 * pbar0 + -604.7279002410935 * pbar2 + 60105.54150042715 * pbar4 + -1083200.0872962917 * pbar6)  + Cm1 * (37.92081080136889 * pbar0 + 15335.55611245629 * pbar2 + -1266716.361309117 * pbar4 + 21016056.011814743 * pbar6)  + Cm2 * (1580.0176226089968 * pbar0 + 490556.6477691949 * pbar2 + -50291260.734309815 * pbar4 + 938208833.050711 * pbar6)  + Cm3 * (1490.8282910994049 * pbar0 + -3580948.2035165587 * pbar2 + 233973708.06785932 * pbar4 + -3630008197.4008174 * pbar6)  + Cm4 * (-87667.56577278583 * pbar0 + -53430164.847496234 * pbar2 + 5212580773.582648 * pbar4 + -97162339486.03407 * pbar6) )  + CL3 * (Cm0 * (2.9523381775656943 * pbar0 + 548.819073081869 * pbar2 + -51795.030157133035 * pbar4 + 898017.171263676 * pbar6)  + Cm1 * (17.096683290051537 * pbar0 + -12972.10980030907 * pbar2 + 841377.9442491224 * pbar4 + -13001147.873438446 * pbar6)  + Cm2 * (-742.4970846053034 * pbar0 + -509468.47468680894 * pbar2 + 44063181.357609935 * pbar4 + -767064264.7656746 * pbar6)  + Cm3 * (-4200.399110210271 * pbar0 + 2545179.628436 * pbar2 + -146078142.49412373 * pbar4 + 2123518839.9546318 * pbar6)  + Cm4 * (24960.170099359344 * pbar0 + 52348095.89497893 * pbar2 + -4375154227.982022 * pbar4 + 76261195105.10321 * pbar6) );
    
    sym[5] = CL0 * (Cm0 * (-3.7016702433726447 * pbar0 + -46.8151496291905 * pbar2 + 553.0254920817185 * pbar4 + 4193.438642476605 * pbar6)  + Cm1 * (-85.88001057368136 * pbar0 + 5318.611636580538 * pbar2 + -272761.3803296858 * pbar4 + 3879683.7662501605 * pbar6)  + Cm2 * (-106.63863325455726 * pbar0 + 16218.357401012205 * pbar2 + -699419.8912039412 * pbar4 + 3826579.936396128 * pbar6)  + Cm3 * (909.6064454266213 * pbar0 + -570699.3281737642 * pbar2 + 33220392.612212293 * pbar4 + -478230208.3408183 * pbar6)  + Cm4 * (9553.38819599775 * pbar0 + -1862534.2331973165 * pbar2 + 85600767.32964632 * pbar4 + -520754443.391702 * pbar6) )  + CL1 * (Cm0 * (-12.694110217223223 * pbar0 + 1419.7446743307166 * pbar2 + -52063.56878248786 * pbar4 + 478351.2358676723 * pbar6)  + Cm1 * (70.68310139583343 * pbar0 + -31643.550862528708 * pbar2 + 1638913.482795943 * pbar4 + -22869008.316829547 * pbar6)  + Cm2 * (1918.890861434632 * pbar0 + -597214.7920571761 * pbar2 + 20858997.526540477 * pbar4 + -124460304.51222657 * pbar6)  + Cm3 * (-7021.632211283318 * pbar0 + 3059962.15672945 * pbar2 + -152431092.9341489 * pbar4 + 2135003660.722137 * pbar6)  + Cm4 * (-144073.12456808783 * pbar0 + 31374827.382380076 * pbar2 + -551692074.1833429 * pbar4 + -8761406643.309536 * pbar6) )  + CL2 * (Cm0 * (10.23479750782575 * pbar0 + -3773.040318385523 * pbar2 + 138395.0204947531 * pbar4 + -1222569.2595124503 * pbar6)  + Cm1 * (-76.84860327059522 * pbar0 + 23978.207735775773 * pbar2 + -1432071.3956786692 * pbar4 + 24503762.02450673 * pbar6)  + Cm2 * (-4846.828241531494 * pbar0 + 1372818.8463250988 * pbar2 + -36376197.56744888 * pbar4 + 42610373.235578544 * pbar6)  + Cm3 * (4482.273224964568 * pbar0 + -1290434.2653832326 * pbar2 + 75873948.08578105 * pbar4 + -1619901476.35351 * pbar6)  + Cm4 * (304322.0963940667 * pbar0 + -45006826.28583882 * pbar2 + -1112803767.5433848 * pbar4 + 59803285146.489555 * pbar6) )  + CL3 * (Cm0 * (-6.5554467767908475 * pbar0 + 2312.8789320044893 * pbar2 + -80950.39398018687 * pbar4 + 684874.5164536302 * pbar6)  + Cm1 * (-3.527959832723492 * pbar0 + 8187.99831715027 * pbar2 + -88741.80730768513 * pbar4 + -4508276.163331642 * pbar6)  + Cm2 * (2828.800895461714 * pbar0 + -680590.171461614 * pbar2 + 10934307.619493425 * pbar4 + 142265826.96341702 * pbar6)  + Cm3 * (3469.001066265762 * pbar0 + -1494542.2879480026 * pbar2 + 45706526.58549776 * pbar4 + 64114290.800872765 * pbar6)  + Cm4 * (-145361.68369315527 * pbar0 + 7268133.757191288 * pbar2 + 2002854710.2898855 * pbar4 + -56048934219.41945 * pbar6) );
    
    asym[0] = CL0 * (Cm0 * (-21.139602754343404 * pbar1 + -57.53392103845504 * pbar3)  + Cm1 * (-4.0647255204851085 * pbar1 + 654.1872635193288 * pbar3)  + Cm2 * (-71.17943319103446 * pbar1 + 6290.705155001335 * pbar3) )  + CL1 * (Cm0 * (6.048786888714927 * pbar1 + 20.633569104988457 * pbar3)  + Cm1 * (-154.44924257222567 * pbar1 + 4777.298977258571 * pbar3)  + Cm2 * (-28.905521369720546 * pbar1 + 5325.732570088489 * pbar3) )  + CL2 * (Cm0 * (-53.789940713931905 * pbar1 + 1000.6085510619582 * pbar3)  + Cm1 * (264.69205280297444 * pbar1 + -10228.31098486552 * pbar3)  + Cm2 * (5764.927556822827 * pbar1 + -192482.77914446837 * pbar3) )  + CL3 * (Cm0 * (42.25467735312852 * pbar1 + -909.7246182749443 * pbar3)  + Cm1 * (0.07303104316087453 * pbar1 + 2839.970389981805 * pbar3)  + Cm2 * (-5433.662162290216 * pbar1 + 177749.5949368265 * pbar3) );
    
    asym[1] = CL0 * (Cm0 * (-37.276198678464496 * pbar1 + -8.029890783078356 * pbar3)  + Cm1 * (-19.510581191299227 * pbar1 + 931.8036109091364 * pbar3)  + Cm2 * (20.10546520544971 * pbar1 + 9271.592484843079 * pbar3) )  + CL1 * (Cm0 * (-4.119058532554866 * pbar1 + 227.62379067569995 * pbar3)  + Cm1 * (-163.3775403606056 * pbar1 + 6666.156824161785 * pbar3)  + Cm2 * (1357.6986057210536 * pbar1 + -35195.136297589306 * pbar3) )  + CL2 * (Cm0 * (-39.28404317688692 * pbar1 + 874.4648565180432 * pbar3)  + Cm1 * (584.3810655086892 * pbar1 + -18492.132868720906 * pbar3)  + Cm2 * (3909.406877851152 * pbar1 + -163961.96052613072 * pbar3) )  + CL3 * (Cm0 * (40.97901926841089 * pbar1 + -1039.8848656870969 * pbar3)  + Cm1 * (-221.46170476120648 * pbar1 + 7555.752231878761 * pbar3)  + Cm2 * (-5061.526470987356 * pbar1 + 186680.50569178318 * pbar3) );
    
    asym[2] = CL0 * (Cm0 * (-49.28327766212144 * pbar1 + 97.88328246816687 * pbar3)  + Cm1 * (-50.439120542116335 * pbar1 + 1055.8183968757871 * pbar3)  + Cm2 * (408.0969978506961 * pbar1 + -86.94034025032197 * pbar3) )  + CL1 * (Cm0 * (-15.648603487210666 * pbar1 + 389.95268424670604 * pbar3)  + Cm1 * (116.49175955318421 * pbar1 + 800.9959101054743 * pbar3)  + Cm2 * (1976.4003847663712 * pbar1 + -62884.55281891257 * pbar3) )  + CL2 * (Cm0 * (17.384785087655874 * pbar1 + -249.97635190165096 * pbar3)  + Cm1 * (374.01203536064156 * pbar1 + -13227.526547946485 * pbar3)  + Cm2 * (-1555.5513713716518 * pbar1 + 16514.880075058474 * pbar3) )  + CL3 * (Cm0 * (4.3536393010959475 * pbar1 + -279.195410381357 * pbar3)  + Cm1 * (-259.020632145047 * pbar1 + 8530.78692245379 * pbar3)  + Cm2 * (-893.6120618208573 * pbar1 + 47036.62095783691 * pbar3) );
    
    asym[3] = CL0 * (Cm0 * (-59.991778494078375 * pbar1 + 881.1350851568324 * pbar3 + -25016.91150262932 * pbar5 + 278119.20590966806 * pbar7)  + Cm1 * (-250.73985174358032 * pbar1 + 26675.107763559492 * pbar3 + -1141898.5548013526 * pbar5 + 14873259.646799052 * pbar7)  + Cm2 * (3115.612537755417 * pbar1 + -356111.8437156842 * pbar3 + 13961738.511167336 * pbar5 + -171197000.6274788 * pbar7)  + Cm3 * (45804.23495115781 * pbar1 + -8348202.55893275 * pbar3 + 403246524.4044064 * pbar5 + -5524580454.976964 * pbar7)  + Cm4 * (-186488.14988276028 * pbar1 + 27747283.054349683 * pbar3 + -1198423846.1428428 * pbar5 + 15160284298.559711 * pbar7)  + Cm5 * (-3094588.0426158854 * pbar1 + 598879189.7421557 * pbar3 + -29987899278.220413 * pbar5 + 417434335192.02795 * pbar7) )  + CL1 * (Cm0 * (-2.7363826424070674 * pbar1 + -2836.2597113543407 * pbar3 + 128609.35074728272 * pbar5 + -1517551.367322283 * pbar7)  + Cm1 * (2878.4910443457575 * pbar1 + -371053.24976137053 * pbar3 + 15298298.518954009 * pbar5 + -189273312.1791219 * pbar7)  + Cm2 * (-14427.974541257914 * pbar1 + 2300123.7607278186 * pbar3 + -87821337.90340349 * pbar5 + 933344950.3461193 * pbar7)  + Cm3 * (-656930.215074548 * pbar1 + 112423024.89868262 * pbar3 + -5059772578.946899 * pbar5 + 64376249282.039856 * pbar7)  + Cm4 * (1408924.8094078847 * pbar1 + -194764026.58273655 * pbar3 + 6461381322.762157 * pbar5 + -56406129632.711586 * pbar7)  + Cm5 * (43101045.50988616 * pbar1 + -7710998992.148751 * pbar3 + 348873036815.2195 * pbar5 + -4397023629293.795 * pbar7) )  + CL2 * (Cm0 * (63.62585456628621 * pbar1 + 1881.6314147584308 * pbar3 + -152249.58412114854 * pbar5 + 1822507.3715271924 * pbar7)  + Cm1 * (-6379.539270125165 * pbar1 + 947501.4775817933 * pbar3 + -39068561.16699801 * pbar5 + 470131598.14758235 * pbar7)  + Cm2 * (16129.127934101412 * pbar1 + -2826392.0756228785 * pbar3 + 79974734.9926336 * pbar5 + -433236424.4108442 * pbar7)  + Cm3 * (1748973.6559659883 * pbar1 + -288446350.3349135 * pbar3 + 12244931244.230612 * pbar5 + -147385412305.8222 * pbar7)  + Cm4 * (-2215045.3851053235 * pbar1 + 201858925.08729833 * pbar3 + -1182532899.9623322 * pbar5 + -66029048983.9524 * pbar7)  + Cm5 * (-113907574.99680613 * pbar1 + 18854678784.164627 * pbar3 + -787673651765.9576 * pbar5 + 9241384361997.54 * pbar7) )  + CL3 * (Cm0 * (-49.09711370309593 * pbar1 + 679.8230488110293 * pbar3 + 16320.854797831853 * pbar5 + -182586.42565065713 * pbar7)  + Cm1 * (4057.541339373209 * pbar1 + -636138.3262050066 * pbar3 + 25926211.37515574 * pbar5 + -304555335.51291734 * pbar7)  + Cm2 * (-2221.9218738979944 * pbar1 + 217641.5255977541 * pbar3 + 24448462.94386147 * pbar5 + -700592097.2990422 * pbar7)  + Cm3 * (-1203620.707254371 * pbar1 + 190031434.15480766 * pbar3 + -7666360348.863804 * pbar5 + 88126161542.40082 * pbar7)  + Cm4 * (657657.1220013831 * pbar1 + 34300437.56883742 * pbar3 + -7127158831.512223 * pbar5 + 144401378063.47714 * pbar7)  + Cm5 * (76978663.45574136 * pbar1 + -11867041613.635277 * pbar3 + 463323907438.10944 * pbar5 + -5101193293895.56 * pbar7) );
    
    asym[4] = CL0 * (Cm0 * (-77.01767331385908 * pbar1 + 2263.1097919277 * pbar3 + -62814.45026845397 * pbar5 + 615663.9688140057 * pbar7)  + Cm1 * (3.857532363101767 * pbar1 + -49542.780827977236 * pbar3 + 3323570.7981812046 * pbar5 + -53930172.336262845 * pbar7)  + Cm2 * (6409.144463223533 * pbar1 + -585748.243661857 * pbar3 + 13626701.157702994 * pbar5 + -84707623.120806 * pbar7)  + Cm3 * (-61926.96044374946 * pbar1 + 23109924.221096676 * pbar3 + -1492881854.3472357 * pbar5 + 23964466118.770973 * pbar7)  + Cm4 * (-126542.44124109141 * pbar1 + -3390397.459731893 * pbar3 + 928564291.1882718 * pbar5 + -17802834907.602554 * pbar7)  + Cm5 * (6009285.855037557 * pbar1 + -2040813888.7385426 * pbar3 + 127269543989.96806 * pbar5 + -2005863628308.7903 * pbar7) )  + CL1 * (Cm0 * (45.03791713493706 * pbar1 + -6382.4478543216255 * pbar3 + 202009.2621553846 * pbar5 + -2144848.1376827117 * pbar7)  + Cm1 * (2723.296813604049 * pbar1 + 327697.82261494995 * pbar3 + -34205843.076478444 * pbar5 + 595574281.1589634 * pbar7)  + Cm2 * (1925.1844525629213 * pbar1 + -1364625.064881407 * pbar3 + 59524706.36891894 * pbar5 + -606615537.0241189 * pbar7)  + Cm3 * (632806.4050690666 * pbar1 + -307739556.63196665 * pbar3 + 19399349806.66989 * pbar5 + -299083138969.36414 * pbar7)  + Cm4 * (-2961443.3929409804 * pbar1 + 483164693.6812024 * pbar3 + -18205718292.97725 * pbar5 + 195125003242.20145 * pbar7)  + Cm5 * (-96006621.07646693 * pbar1 + 29334995498.136654 * pbar3 + -1682645701358.8896 * pbar5 + 25036417696826.363 * pbar7) )  + CL2 * (Cm0 * (138.19792687832916 * pbar1 + -4829.728899526362 * pbar3 + -104345.02461139284 * pbar5 + 3521102.1744036856 * pbar7)  + Cm1 * (-4392.201974758356 * pbar1 + -1151911.9230444587 * pbar3 + 96684167.89698246 * pbar5 + -1582718830.1845307 * pbar7)  + Cm2 * (-105471.23015683058 * pbar1 + 9843952.14476681 * pbar3 + -167274950.1998101 * pbar5 + -145264922.61528605 * pbar7)  + Cm3 * (-2543782.04816348 * pbar1 + 912337017.0931749 * pbar3 + -52833655896.04905 * pbar5 + 779220853899.2092 * pbar7)  + Cm4 * (11703129.017166674 * pbar1 + -1192313560.715464 * pbar3 + 25365558690.67831 * pbar5 + -79844149710.0009 * pbar7)  + Cm5 * (312624350.3600162 * pbar1 + -82656268944.9774 * pbar3 + 4446557678800.55 * pbar5 + -63697363274899.13 * pbar7) )  + CL3 * (Cm0 * (-179.53438095709743 * pbar1 + 9438.643497830903 * pbar3 + 951.0097010895805 * pbar5 + -2772606.000009338 * pbar7)  + Cm1 * (479.1457290989878 * pbar1 + 1028970.9547421571 * pbar3 + -70919565.02819271 * pbar5 + 1094028742.9429662 * pbar7)  + Cm2 * (99782.19702830499 * pbar1 + -6746232.835517007 * pbar3 + 10623702.606101831 * pbar5 + 2142088168.678976 * pbar7)  + Cm3 * (2323672.065201572 * pbar1 + -675883196.6822554 * pbar3 + 36680269815.40174 * pbar5 + -523046454978.41095 * pbar7)  + Cm4 * (-8331585.7686907835 * pbar1 + 545715184.3745424 * pbar3 + 2081706566.0112538 * pbar5 + -249739831727.56433 * pbar7)  + Cm5 * (-244038483.43157005 * pbar1 + 58516158496.89237 * pbar3 + -3009102831153.6294 * pbar5 + 41940335798776.91 * pbar7) );
    
    // set center control surface
    lr[5] = bounds(sym[0]);
    // loop thru inboard to outboard control surfaces
    for (i=0; i<5; i++) {
        // set left control surface
        lr[4-i] = bounds( left(sym[i+1], asym[i]));
        // set right control surface
        lr[6+i] = bounds(right(sym[i+1], asym[i]));
    }
}

#endif

